{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/imogenkraak/Desktop/Projects/turtle-slide/turtle-slide/App.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { StatusBar } from 'expo-status-bar';\nimport React, { Component } from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { GameEngine } from 'react-native-game-engine';\nimport Matter from 'matter-js';\nimport Ball from \"./Ball\";\nimport Floor from \"./Floor\";\nimport Physics from \"./Physics\";\nimport Slope from \"./Slope\";\n\nvar App = function (_Component) {\n  _inherits(App, _Component);\n\n  var _super = _createSuper(App);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _super.call(this, props);\n\n    _this.setupWorld = function () {\n      var engine = Matter.Engine.create({\n        enableSleeping: false\n      });\n      var world = engine.world;\n      var ball = Matter.Bodies.circle(500, 850, 50, 50);\n      var floor = Matter.Bodies.rectangle(100, 900, 10000, 600, {\n        isStatic: true\n      });\n      var slope = Matter.Bodies.trapezoid(900, 550, 200, 55, 5, {\n        isStatic: true\n      });\n      Matter.World.add(world, [ball, floor, slope]);\n      return {\n        physics: {\n          engine: engine,\n          world: world\n        },\n        ball: {\n          body: ball,\n          size: [50, 50],\n          color: 'red',\n          renderer: Ball\n        },\n        floor: {\n          body: floor,\n          size: [10000, 600],\n          isStatic: true,\n          color: 'blue',\n          renderer: Floor\n        },\n        slope: {\n          body: slope,\n          size: [200, 55, 0.8],\n          isStatic: true,\n          color: 'green',\n          renderer: Slope\n        }\n      };\n    };\n\n    _this.state = {\n      running: true\n    };\n    _this.gameEngine = null;\n    _this.entities = _this.setupWorld();\n    _this.MAX_WIDTH = 300;\n    _this.MAX_HEIGHT = 300;\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 5\n        }\n      }, React.createElement(GameEngine, {\n        ref: function ref(_ref) {\n          _this2.gameEngine = _ref;\n        },\n        style: styles.gameContainer,\n        running: this.state.running,\n        systems: [Physics],\n        entities: this.entities,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 7\n        }\n      }), React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 7\n        }\n      }, \"Hello its me\"), React.createElement(StatusBar, {\n        style: \"auto\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 7\n        }\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport { App as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  gameContainer: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0\n  }\n});","map":{"version":3,"sources":["/Users/imogenkraak/Desktop/Projects/turtle-slide/turtle-slide/App.js"],"names":["StatusBar","React","Component","GameEngine","Matter","Ball","Floor","Physics","Slope","App","props","setupWorld","engine","Engine","create","enableSleeping","world","ball","Bodies","circle","floor","rectangle","isStatic","slope","trapezoid","World","add","physics","body","size","color","renderer","state","running","gameEngine","entities","MAX_WIDTH","MAX_HEIGHT","styles","container","ref","gameContainer","StyleSheet","flex","backgroundColor","alignItems","justifyContent","position","top","bottom","left","right"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React, { Component } from 'react';\nimport { Dimensions, StyleSheet, Text, View } from 'react-native';\nimport { GameEngine } from 'react-native-game-engine';\nimport Matter from 'matter-js';\nimport Ball from './Ball' \nimport Floor from './Floor' \nimport Physics from './Physics';\nimport Slope from './Slope';\n\n\nexport default class App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      running: true\n  };\n\n    this.gameEngine = null;\n    this.entities = this.setupWorld();\n\n    this.MAX_WIDTH = 300\n    this.MAX_HEIGHT = 300\n  }\n\n  // Constants = {\n  //   MAX_WIDTH: Dimensions.get(\"screen\").width,\n  //   MAX_HEIGHT: Dimensions.get(\"screen\").height\n  // }\n\n  setupWorld = () => {\n\n    let engine = Matter.Engine.create({ enableSleeping: false })\n    let world = engine.world;\n\n    let ball = Matter.Bodies.circle( 500, 850, 50, 50);\n    let floor = Matter.Bodies.rectangle(100, 900, 10000, 600, { isStatic: true });\n    let slope = Matter.Bodies.trapezoid(900, 550, 200, 55, 5, {isStatic: true});\n\n    \n\n\n    \n\n    Matter.World.add(world, [ball, floor, slope]);\n    // Matter.Body.setVelocity(ball, 1)\n    // Matter.world.setBounds(0, 0, 1800, 1800, 15)\n  \n    return {\n      physics: { engine: engine, world: world },\n      ball: { body: ball, size: [50, 50], color: 'red', renderer: Ball },\n      floor: { body: floor, size: [10000, 600],isStatic: true, color: 'blue', renderer: Floor },\n      slope: { body: slope, size: [200, 55, 0.8], isStatic: true, color: 'green', renderer: Slope }\n\n   }\n   \n    \n  }\n\n  render() {\n  return (\n    <View style={styles.container}>\n\n      <GameEngine ref={(ref) => { this.gameEngine = ref; }}\n      style={styles.gameContainer}\n      running={this.state.running}\n\n      systems={[Physics]}\n      entities={this.entities} />\n\n      <Text>Hello its me</Text>\n      <StatusBar style=\"auto\" />\n    </View>\n  );\n\n  }\n\n  \n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  gameContainer: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0,\n},\n});\n"]},"metadata":{},"sourceType":"module"}